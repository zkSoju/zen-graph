// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("sender", Value.fromString(""));
    this.set("recipient", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("allotedTime", Value.fromBigInt(BigInt.zero()));
    this.set("status", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Swap must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Swap", id.toString(), this);
    }
  }

  static load(id: string): Swap | null {
    return changetype<Swap | null>(store.get("Swap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): string {
    let value = this.get("sender");
    return value!.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get recipient(): string {
    let value = this.get("recipient");
    return value!.toString();
  }

  set recipient(value: string) {
    this.set("recipient", Value.fromString(value));
  }

  get offerTokens(): Array<string> {
    let value = this.get("offerTokens");
    return value!.toStringArray();
  }

  set offerTokens(value: Array<string>) {
    this.set("offerTokens", Value.fromStringArray(value));
  }

  get requestTokens(): Array<string> {
    let value = this.get("requestTokens");
    return value!.toStringArray();
  }

  set requestTokens(value: Array<string>) {
    this.set("requestTokens", Value.fromStringArray(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get allotedTime(): BigInt {
    let value = this.get("allotedTime");
    return value!.toBigInt();
  }

  set allotedTime(value: BigInt) {
    this.set("allotedTime", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}

export class OfferToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("associatedSwap", Value.fromString(""));
    this.set("contractAddress", Value.fromBytes(Bytes.empty()));
    this.set("tokenIds", Value.fromBigIntArray(new Array(0)));
    this.set("quantities", Value.fromBigIntArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OfferToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OfferToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OfferToken", id.toString(), this);
    }
  }

  static load(id: string): OfferToken | null {
    return changetype<OfferToken | null>(store.get("OfferToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get associatedSwap(): string {
    let value = this.get("associatedSwap");
    return value!.toString();
  }

  set associatedSwap(value: string) {
    this.set("associatedSwap", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value!.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get tokenIds(): Array<BigInt> {
    let value = this.get("tokenIds");
    return value!.toBigIntArray();
  }

  set tokenIds(value: Array<BigInt>) {
    this.set("tokenIds", Value.fromBigIntArray(value));
  }

  get quantities(): Array<BigInt> {
    let value = this.get("quantities");
    return value!.toBigIntArray();
  }

  set quantities(value: Array<BigInt>) {
    this.set("quantities", Value.fromBigIntArray(value));
  }
}

export class RequestToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("associatedSwap", Value.fromString(""));
    this.set("contractAddress", Value.fromBytes(Bytes.empty()));
    this.set("tokenIds", Value.fromBigIntArray(new Array(0)));
    this.set("quantities", Value.fromBigIntArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RequestToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RequestToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RequestToken", id.toString(), this);
    }
  }

  static load(id: string): RequestToken | null {
    return changetype<RequestToken | null>(store.get("RequestToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get associatedSwap(): string {
    let value = this.get("associatedSwap");
    return value!.toString();
  }

  set associatedSwap(value: string) {
    this.set("associatedSwap", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value!.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get tokenIds(): Array<BigInt> {
    let value = this.get("tokenIds");
    return value!.toBigIntArray();
  }

  set tokenIds(value: Array<BigInt>) {
    this.set("tokenIds", Value.fromBigIntArray(value));
  }

  get quantities(): Array<BigInt> {
    let value = this.get("quantities");
    return value!.toBigIntArray();
  }

  set quantities(value: Array<BigInt>) {
    this.set("quantities", Value.fromBigIntArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get outgoingSwaps(): Array<string> {
    let value = this.get("outgoingSwaps");
    return value!.toStringArray();
  }

  set outgoingSwaps(value: Array<string>) {
    this.set("outgoingSwaps", Value.fromStringArray(value));
  }

  get incomingSwaps(): Array<string> {
    let value = this.get("incomingSwaps");
    return value!.toStringArray();
  }

  set incomingSwaps(value: Array<string>) {
    this.set("incomingSwaps", Value.fromStringArray(value));
  }
}
