// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SwapAccepted extends ethereum.Event {
  get params(): SwapAccepted__Params {
    return new SwapAccepted__Params(this);
  }
}

export class SwapAccepted__Params {
  _event: SwapAccepted;

  constructor(event: SwapAccepted) {
    this._event = event;
  }

  get swapId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SwapCancelled extends ethereum.Event {
  get params(): SwapCancelled__Params {
    return new SwapCancelled__Params(this);
  }
}

export class SwapCancelled__Params {
  _event: SwapCancelled;

  constructor(event: SwapCancelled) {
    this._event = event;
  }

  get swapId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SwapCreated extends ethereum.Event {
  get params(): SwapCreated__Params {
    return new SwapCreated__Params(this);
  }
}

export class SwapCreated__Params {
  _event: SwapCreated;

  constructor(event: SwapCreated) {
    this._event = event;
  }

  get swapId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get allotedTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Zen__getSwapOfferResultValue0Struct extends ethereum.Tuple {
  get contractAddress(): Address {
    return this[0].toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get tokenQuantities(): Array<BigInt> {
    return this[2].toBigIntArray();
  }
}

export class Zen__getSwapRequestResultValue0Struct extends ethereum.Tuple {
  get contractAddress(): Address {
    return this[0].toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get tokenQuantities(): Array<BigInt> {
    return this[2].toBigIntArray();
  }
}

export class Zen__getSwapSingleResultSingleSwapStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }

  get createdAt(): BigInt {
    return this[2].toBigInt();
  }

  get allotedTime(): i32 {
    return this[3].toI32();
  }

  get status(): i32 {
    return this[4].toI32();
  }
}

export class Zen__getSwapsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: i32;
  value4: i32;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: i32,
    value4: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    return map;
  }
}

export class Zen__getSwapsOutgoingResultOutgoingSwapsStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }

  get createdAt(): BigInt {
    return this[2].toBigInt();
  }

  get allotedTime(): i32 {
    return this[3].toI32();
  }

  get status(): i32 {
    return this[4].toI32();
  }
}

export class Zen extends ethereum.SmartContract {
  static bind(address: Address): Zen {
    return new Zen("Zen", address);
  }

  getOfferTokens(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "getOfferTokens",
      "getOfferTokens(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_getOfferTokens(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOfferTokens",
      "getOfferTokens(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRequestTokens(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "getRequestTokens",
      "getRequestTokens(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_getRequestTokens(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRequestTokens",
      "getRequestTokens(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSwapIndex(param0: BigInt): BigInt {
    let result = super.call("getSwapIndex", "getSwapIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_getSwapIndex(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSwapIndex",
      "getSwapIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSwapOffer(id: BigInt): Array<Zen__getSwapOfferResultValue0Struct> {
    let result = super.call(
      "getSwapOffer",
      "getSwapOffer(uint256):((address,uint256[],uint256[])[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toTupleArray<Zen__getSwapOfferResultValue0Struct>();
  }

  try_getSwapOffer(
    id: BigInt
  ): ethereum.CallResult<Array<Zen__getSwapOfferResultValue0Struct>> {
    let result = super.tryCall(
      "getSwapOffer",
      "getSwapOffer(uint256):((address,uint256[],uint256[])[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Zen__getSwapOfferResultValue0Struct>()
    );
  }

  getSwapRequest(id: BigInt): Array<Zen__getSwapRequestResultValue0Struct> {
    let result = super.call(
      "getSwapRequest",
      "getSwapRequest(uint256):((address,uint256[],uint256[])[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toTupleArray<Zen__getSwapRequestResultValue0Struct>();
  }

  try_getSwapRequest(
    id: BigInt
  ): ethereum.CallResult<Array<Zen__getSwapRequestResultValue0Struct>> {
    let result = super.tryCall(
      "getSwapRequest",
      "getSwapRequest(uint256):((address,uint256[],uint256[])[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Zen__getSwapRequestResultValue0Struct>()
    );
  }

  getSwapSingle(
    id: BigInt,
    offerer: Address
  ): Zen__getSwapSingleResultSingleSwapStruct {
    let result = super.call(
      "getSwapSingle",
      "getSwapSingle(uint256,address):((uint256,address,uint64,uint24,uint8))",
      [
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromAddress(offerer)
      ]
    );

    return changetype<Zen__getSwapSingleResultSingleSwapStruct>(
      result[0].toTuple()
    );
  }

  try_getSwapSingle(
    id: BigInt,
    offerer: Address
  ): ethereum.CallResult<Zen__getSwapSingleResultSingleSwapStruct> {
    let result = super.tryCall(
      "getSwapSingle",
      "getSwapSingle(uint256,address):((uint256,address,uint64,uint24,uint8))",
      [
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromAddress(offerer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Zen__getSwapSingleResultSingleSwapStruct>(value[0].toTuple())
    );
  }

  getSwaps(param0: Address, param1: BigInt): Zen__getSwapsResult {
    let result = super.call(
      "getSwaps",
      "getSwaps(address,uint256):(uint256,address,uint64,uint24,uint8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Zen__getSwapsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toI32()
    );
  }

  try_getSwaps(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Zen__getSwapsResult> {
    let result = super.tryCall(
      "getSwaps",
      "getSwaps(address,uint256):(uint256,address,uint64,uint24,uint8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Zen__getSwapsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toI32()
      )
    );
  }

  getSwapsOutgoing(
    user: Address
  ): Array<Zen__getSwapsOutgoingResultOutgoingSwapsStruct> {
    let result = super.call(
      "getSwapsOutgoing",
      "getSwapsOutgoing(address):((uint256,address,uint64,uint24,uint8)[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toTupleArray<
      Zen__getSwapsOutgoingResultOutgoingSwapsStruct
    >();
  }

  try_getSwapsOutgoing(
    user: Address
  ): ethereum.CallResult<
    Array<Zen__getSwapsOutgoingResultOutgoingSwapsStruct>
  > {
    let result = super.tryCall(
      "getSwapsOutgoing",
      "getSwapsOutgoing(address):((uint256,address,uint64,uint24,uint8)[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Zen__getSwapsOutgoingResultOutgoingSwapsStruct>()
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptSwapCall extends ethereum.Call {
  get inputs(): AcceptSwapCall__Inputs {
    return new AcceptSwapCall__Inputs(this);
  }

  get outputs(): AcceptSwapCall__Outputs {
    return new AcceptSwapCall__Outputs(this);
  }
}

export class AcceptSwapCall__Inputs {
  _call: AcceptSwapCall;

  constructor(call: AcceptSwapCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AcceptSwapCall__Outputs {
  _call: AcceptSwapCall;

  constructor(call: AcceptSwapCall) {
    this._call = call;
  }
}

export class CancelSwapCall extends ethereum.Call {
  get inputs(): CancelSwapCall__Inputs {
    return new CancelSwapCall__Inputs(this);
  }

  get outputs(): CancelSwapCall__Outputs {
    return new CancelSwapCall__Outputs(this);
  }
}

export class CancelSwapCall__Inputs {
  _call: CancelSwapCall;

  constructor(call: CancelSwapCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelSwapCall__Outputs {
  _call: CancelSwapCall;

  constructor(call: CancelSwapCall) {
    this._call = call;
  }
}

export class CreateSwapCall extends ethereum.Call {
  get inputs(): CreateSwapCall__Inputs {
    return new CreateSwapCall__Inputs(this);
  }

  get outputs(): CreateSwapCall__Outputs {
    return new CreateSwapCall__Outputs(this);
  }
}

export class CreateSwapCall__Inputs {
  _call: CreateSwapCall;

  constructor(call: CreateSwapCall) {
    this._call = call;
  }

  get offerTokens(): Array<CreateSwapCallOfferTokensStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      CreateSwapCallOfferTokensStruct
    >();
  }

  get requestTokens(): Array<CreateSwapCallRequestTokensStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      CreateSwapCallRequestTokensStruct
    >();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get allotedTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateSwapCall__Outputs {
  _call: CreateSwapCall;

  constructor(call: CreateSwapCall) {
    this._call = call;
  }
}

export class CreateSwapCallOfferTokensStruct extends ethereum.Tuple {
  get contractAddress(): Address {
    return this[0].toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get tokenQuantities(): Array<BigInt> {
    return this[2].toBigIntArray();
  }
}

export class CreateSwapCallRequestTokensStruct extends ethereum.Tuple {
  get contractAddress(): Address {
    return this[0].toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get tokenQuantities(): Array<BigInt> {
    return this[2].toBigIntArray();
  }
}

export class ExtendAllotedTimeCall extends ethereum.Call {
  get inputs(): ExtendAllotedTimeCall__Inputs {
    return new ExtendAllotedTimeCall__Inputs(this);
  }

  get outputs(): ExtendAllotedTimeCall__Outputs {
    return new ExtendAllotedTimeCall__Outputs(this);
  }
}

export class ExtendAllotedTimeCall__Inputs {
  _call: ExtendAllotedTimeCall;

  constructor(call: ExtendAllotedTimeCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get allotedTime(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class ExtendAllotedTimeCall__Outputs {
  _call: ExtendAllotedTimeCall;

  constructor(call: ExtendAllotedTimeCall) {
    this._call = call;
  }
}
